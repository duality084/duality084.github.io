<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>mobile - Etiqueta - BHF</title>
        <link>https://bhf.com.ar/tags/mobile/</link>
        <description>mobile - Etiqueta - BHF</description>
        <generator>Hugo -- gohugo.io</generator><language>es</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 25 Nov 2020 09:11:03 -0300</lastBuildDate><atom:link href="https://bhf.com.ar/tags/mobile/" rel="self" type="application/rss+xml" /><item>
    <title>Bypaseando la verificación SSL en una app de flutter en Android. Parte 2)</title>
    <link>https://bhf.com.ar/bypasss-ssl-android-flutterapp-2/</link>
    <pubDate>Wed, 25 Nov 2020 09:11:03 -0300</pubDate>
    <author>Autor</author>
    <guid>https://bhf.com.ar/bypasss-ssl-android-flutterapp-2/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/bypasss-ssl-android-flutterapp/man-in-the-middle.png" referrerpolicy="no-referrer">
            </div>En la primera parte vimos como encontrar el offset a parchear con frida, a partir de ahi solo deberíamos ejecutar el script de frida para que parchee la aplicacion que deseemos en memoria. Debido a que no deseaba rootear mi celular esto trajo aparejado otro desafiado.
Para resumir lo que haremos es lo siguiente.
 Desempaquetar nuestro APK objetivo Descargar el gadget de frida según la arquitectura de la aplicación objetivo arm64 o arm32.]]></description>
</item><item>
    <title>Bypaseando la verificación SSL en una app de flutter en Android. Parte 1)</title>
    <link>https://bhf.com.ar/bypasss-ssl-android-flutterapp/</link>
    <pubDate>Fri, 16 Oct 2020 09:11:03 -0300</pubDate>
    <author>Autor</author>
    <guid>https://bhf.com.ar/bypasss-ssl-android-flutterapp/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/bypasss-ssl-android-flutterapp/man-in-the-middle.png" referrerpolicy="no-referrer">
            </div>Aun recuerdo cuando la vida era mas fácil para los chismosos y el SSL era utilizado con suerte solo en el envió del login, el resto de la información viajaba sin cifrar, mas o menos en 2010 eso empezó a cambiar luego de que saliera la extension de Firefox Firesheep cualquier persona con solo instalarse la extension podía realizar un ataque del tipo &ldquo;man in the middle&rdquo; robarse las cookies de sesión de sitios como Facebook, Twitter, Google y realizar un &ldquo;session hijacking&rdquo; o secuestro de sesión y sin saber la contraseña entrar en la cuenta del usuario afectado, junto con la expansión de las redes WIFI publicas esto era un gran problema,muchos se habian convertido en un potencial &ldquo;hackerman&rdquo;.]]></description>
</item></channel>
</rss>
